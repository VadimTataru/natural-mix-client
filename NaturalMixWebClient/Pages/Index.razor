@page "/"
@using System.ComponentModel.DataAnnotations
@using System.Diagnostics;
@using MudBlazor
@using System.Text
@using System.Text.Json
@using System.Net.Http.Headers
@using NaturalMixWebClient.Models
@inject IDialogService DialogService

<PageTitle>Index</PageTitle>

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">    
    <MudCard Class="mt-16" Elevation="10" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Indigo.Lighten4};")">
        <MudCardHeader Class="justify-content-center">
            <MudText Typo="Typo.h3">Анализ состава косметики</MudText>
        </MudCardHeader>
        <MudCardContent xs="7">
            <MudItem xs="12" Class="justify-center">
                <MudTextField @bind-Value="TextToSend" DisableUnderLine="true" Lines="10" Placeholder="Вставьте список ингредиентов через запятую..." 
                Variant="Variant.Filled" Style="@($"color:{Colors.Shades.Black}; background:{Colors.Indigo.Lighten5};")"></MudTextField>
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-center mt-8">
                <MudButton @onclick="@(async () => await GetComponentsDetails())" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Size="Size.Large">Анализировать</MudButton>
                <MudText Class="mx-8 mt-2">...или загрузите картинку с текстом!</MudText>
                
                
                <MudFileUpload T="IBrowserFile" Accept="image/*" FilesChanged="UploadFilesAsync">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Large"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context">
                            Загрузить картинку
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>

            </MudItem>
        </MudCardContent>
    </MudCard>
</MudContainer>

@{
    if(componentDetails != null)
    {
        <MudContainer Class="my-16" MaxWidth="MaxWidth.Medium">    
            <MudCard Class="my-16" Elevation="10" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Indigo.Lighten4};")">
                <MudCardHeader Class="justify-content-center">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudText Class="d-flex align-center justify-center mud-width-full" Typo="Typo.h5">Результаты анализа</MudText>
                        </MudItem>
                        <MudItem xs="12">
                            <MudText Class="d-flex align-center justify-center mud-width-full" Typo="Typo.body1">Распознано @componentDetails.Count элементов</MudText>
                        </MudItem>                        
                    </MudGrid>                 
                </MudCardHeader>
                <MudCardContent xs="7">
                    <MudExpansionPanels MultiExpansion="true">
                    @{
                        foreach(var comp in componentDetails)
                        {
                            <MudExpansionPanel HideIcon="true">
                                <TitleContent>
                                    <div class="d-flex">
                                        <MudText Class="mt-1">@comp.Name</MudText>
                                        <MudBadge Content="comp.Safety == null ? nullableNaturalness : (int)comp.Safety" Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                                            <MudIcon Icon="@Icons.Material.Filled.SafetyCheck" Color="Color.Default" Title="Безопасность" />
                                        </MudBadge>
                                    </div>
                                </TitleContent>
                                <ChildContent>                                
                                    <p>
                                        <MudText Typo="Typo.body1">Происхождение: @comp.Origin</MudText>
                                    </p> 
                                    <p>
                                        <MudText Typo="Typo.body1">Описание: @comp.Description</MudText>
                                    </p>
                                </ChildContent>
                            </MudExpansionPanel>
                        }
                    }
                    </MudExpansionPanels>
                </MudCardContent>
            </MudCard>
        </MudContainer>
    }
}

@code {
    [Required]
    private string? TextToSend { get; set; }

    private List<ComponentResponse>? componentDetails;
    private RecognizedTextResponse? recognizedTextResponse;
    private const string nullableNaturalness = "-";

    //FixMe
    private async Task UploadFilesAsync(IBrowserFile file)
    {
        var ms = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(ms);
        byte[] imageData = ms.ToArray();
        ms.Close();

        HttpClient client = new HttpClient();
        string url = "https://localhost:7246/api/ComponentItem/recognize";
        try
        {
            using var response = await client.PostAsJsonAsync(url, imageData);
            if(response.IsSuccessStatusCode)
            {
                recognizedTextResponse = await response.Content.ReadFromJsonAsync<RecognizedTextResponse>();
                TextToSend = recognizedTextResponse?.Text;
                componentDetails = recognizedTextResponse?.Data;
            }
            
        } catch(Exception e)
        {
            Trace.TraceError(e.ToString());
            Console.WriteLine("Unexpected Error: " + e.Message);
            Console.WriteLine("Details: ");
            Console.WriteLine(e.ToString());
        }
    }

    private async Task GetComponentsDetails()
    {
        HttpClient client = new HttpClient();

        string url = "https://localhost:7246/api/ComponentItem";        

        if (String.IsNullOrEmpty(TextToSend))
        {
            return;
        }

        if(TextToSend[TextToSend.Length-1] == ',')
        {
            TextToSend = TextToSend.Remove(TextToSend.Length - 1);
        }

        var postBody = TextToSend.Split(',');
        for(int i = 0; i < postBody.Length; i++)
        {
            postBody[i] = postBody[i].Trim(new char[] { ' ', ',' , '\n'});
        }

        try
        {
            using var response = await client.PostAsJsonAsync(url, postBody);
            if(response.IsSuccessStatusCode)
                componentDetails = await response.Content.ReadFromJsonAsync<List<ComponentResponse>>();
        } catch(Exception e)
        {
            Trace.TraceError(e.ToString());
            Console.WriteLine("Unexpected Error: " + e.Message);
            Console.WriteLine("Details: ");
            Console.WriteLine(e.ToString());
        }        
    }
}