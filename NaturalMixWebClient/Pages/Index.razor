@page "/"
@using System.ComponentModel.DataAnnotations
@using Emgu.CV
@using Emgu.CV.OCR
@using Emgu.CV.Structure
@using MudBlazor
@using System.Text
@using System.Text.Json
@using System.Net.Http.Headers
@using NaturalMixWebClient.Models
@inject IDialogService DialogService

<PageTitle>Index</PageTitle>

<MudContainer Class="mt-16" MaxWidth="MaxWidth.Medium">    
    <MudCard Class="mt-16" Elevation="10" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Indigo.Lighten4};")">
        <MudCardHeader Class="justify-content-center">
            <MudText Typo="Typo.h3">Анализ состава косметики</MudText>
        </MudCardHeader>
        <MudCardContent xs="7">
            <MudItem xs="12" Class="justify-center">
                <MudTextField @bind-Value="TextToSend" DisableUnderLine="true" Lines="10" Placeholder="Вставьте список ингредиентов через запятую..." 
                Variant="Variant.Filled" Style="@($"color:{Colors.Shades.Black}; background:{Colors.Indigo.Lighten5};")"></MudTextField>
            </MudItem>
            <MudItem xs="12" Class="d-flex justify-center mt-8">
                <MudButton @onclick="@(async () => await GetComponentsDetails())" Variant="Variant.Filled" DisableElevation="true" Color="Color.Primary" Size="Size.Large">Анализировать</MudButton>
                <MudText Class="mx-8 mt-2">...или загрузите картинку с текстом!</MudText>
                
                
                <MudFileUpload T="IBrowserFile" Accept="image/*" FilesChanged="UploadFiles">
                    <ButtonTemplate>
                        <MudButton HtmlTag="label"
                                   Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   Size="Size.Large"
                                   StartIcon="@Icons.Material.Filled.CloudUpload"
                                   for="@context">
                            Upload Files
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>

            </MudItem>
        </MudCardContent>
    </MudCard>
</MudContainer>

@{
    if(componentDetails != null)
    {
        <MudContainer Class="ma-16" MaxWidth="MaxWidth.Medium">    
            <MudCard Class="ma-16" Elevation="10" Style="@($"color:{Colors.Grey.Darken4}; background:{Colors.Indigo.Lighten4};")">
                <MudCardHeader Class="justify-content-center">
                    <p>
                        <MudText Typo="Typo.h5">Результаты анализа</MudText>
                    </p>
                    <p>
                        <MudText Typo="Typo.body1">Распознано @componentDetails.Count из @startCount</MudText>
                    </p>                    
                </MudCardHeader>
                <MudCardContent xs="7">
                    <MudExpansionPanels>
                    @{
                        foreach(var comp in componentDetails)
                        {
                            <MudExpansionPanel HideIcon="true">
                                <TitleContent>
                                    <div class="d-flex">
                                        <MudText Class="mt-1">@comp.Name</MudText>
                                        <MudBadge Content="comp.Safety == null ? nullableNaturalness : (int)comp.Safety" Color="Color.Primary" Overlap="true" Class="d-flex ml-auto">
                                            <MudIcon Icon="@Icons.Material.Filled.SafetyCheck" Color="Color.Default" Title="Безопасность" />
                                        </MudBadge>
                                    </div>
                                </TitleContent>
                                <ChildContent>                                
                                    <p>
                                        <MudText Typo="Typo.body1">Происхождение: @comp.Origin</MudText>
                                    </p> 
                                    <p>
                                        <MudText Typo="Typo.body1">Описание: @comp.Description</MudText>
                                    </p>
                                </ChildContent>
                            </MudExpansionPanel>
                        }
                    }
                    </MudExpansionPanels>
                </MudCardContent>
            </MudCard>
        </MudContainer>
    }
}

@code {
    [Required]
    private string? TextToSend { get; set; }
    private List<ComponentResponse>? componentDetails;
    private int startCount = 0;
    private const string nullableNaturalness = "-";

    private void UploadFiles(IBrowserFile file)
    {
        try
        {
            Tesseract tesseract = new(@"..\tessdata\", "eng", OcrEngineMode.TesseractLstmCombined);
            tesseract.SetImage(new Image<Bgr, byte>(file.Name));
            tesseract.Recognize();
            TextToSend = tesseract.GetUTF8Text();
            tesseract.Dispose();
        } catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task GetComponentsDetails()
    {
        HttpClient client = new HttpClient();

        string url = "https://localhost:7246/api/ComponentItem";        

        if (String.IsNullOrEmpty(TextToSend))
        {
            return;
        }

        if(TextToSend[TextToSend.Length-1] == ',')
        {
            TextToSend = TextToSend.Remove(TextToSend.Length - 1);
        }

        var postBody = TextToSend.Split(',');
        startCount = postBody.Length;
        foreach (var word in postBody)
        {
            word.Trim();
        }


        try
        {
            using var response = await client.PostAsJsonAsync(url, postBody);
            if(response.IsSuccessStatusCode)
                componentDetails = await response.Content.ReadFromJsonAsync<List<ComponentResponse>>();
        } catch(Exception ex)
        {
            Console.WriteLine(ex.Message);
        }        

        if (componentDetails != null)
        {
            for(int i = 0; i < componentDetails.Count; i++)
            {
                Console.WriteLine(componentDetails[i].Description);
            }
        }
        
    }
}